#summary Performance benchmarks
#labels Featured

mpmath is written with the goal of providing the fastest implementation of arbitrary-precision floating-point arithmetic possible in pure Python. This page compares the performance of mpmath with that of the `decimal` module in Python's standard library.

==Explanation of the benchmark==

These tables were generated using the `benchmark.py` script in the mpmath `tests` directory, running on an Athlon 3700+. The script measures the number of operations that can be carried out per second at the given precision with x and y being random full-precision numbers between 0 and 32. "Decimal" means that the `decimal.Decimal` class is used, "mpf" means that the `mpmath.mpf` class is used, and "raw mpf" means that the operations are performed using the raw arithmetic functions in `mpmath.lib` (this avoids the overhead of creating object instances). Numbers in parentheses indicate the speedup compared to Decimals. The three rightmost columns list the same benchmark but with  [http://psyco.sourceforge.net/ psyco] enabled (with `psyco.full()`).

The decimal library does not implement transcendental functions, but there are user-made libraries that can be used for comparison. The Python Package Index contains at least three libraries: [http://pypi.python.org/pypi/dmath/0.9 dmath], [http://pypi.python.org/pypi/AJDecimalMathAdditions/0.1.0 AJDecimalMathAdditions], and  [http://pypi.python.org/pypi/decimalfuncs/1.4 decimalfuncs]. They all have roughly similar performance, but dmath seems to be slightly faster overall and was therefore used for this benchmark.

==Summary==
  * mpmath is roughly 10x faster than the `decimal` module at 10-100 digit precision and 100x faster at 100-1000 digit precision.
  * Using the functional interface in mpmath.lib further improves performance by 2x for some operations.
  * Transcendental functions are an additional order of magnitude faster in mpmath compared to `Decimal` implementations. The greatest particular speedup over Decimal in the entire benchmark occurs for computing natural logarithms, which is 8000x faster at 300-digit precision (the test was not run at 1000-digit precision as finishing a single logarithm would take too long in dmath)
  * psyco speeds up both decimal and mpmath by about 50-100%
  * The only operation that is slower in mpmath is (not surprisingly) string conversion

==Graphs==

This graph compares the speed of Decimal (blue), mpmath.mpf (red) and mpmath.lib (green) with psyco enabled, using the default (half-even) rounding mode. The x axis measures the precision (in decimal digits) and the y axis measures the relative speed compared to [http://code.google.com/p/gmpy/ gmpy] (in other words, lower is better). Note that the y axis is logarithmic.
[http://mpmath.googlecode.com/svn/wiki/arithmetic_performance.png]

Under optimal conditions (using floor rounding), multiplication with mpmath.lib at low precision (< 50 decimal digits) is only 4x slower than in gmpy; addition and division are about 5x slower.
[http://mpmath.googlecode.com/svn/wiki/arithmetic_performance_floor.png]

==Detailed tables==

*Convert to integer (int(x))*
|| *digits* || *Decimal* || *mpf* ||  *raw mpf* || *Decimal+psyco* || *mpf+psyco* || *raw mpf+psyco* ||
|| 15 || 82000 || 380000 (4.7x) || 740000 (9.0x) || 82000 || 590000 (7.2x) || 3280000 (39.7x) ||
|| 30 || 52000 || 390000 (7.5x) || 740000 (14.3x) || 54000 || 540000 (10.0x) || 3250000 (59.2x) ||
|| 100 || 19000 || 390000 (20.3x) || 740000 (38.3x) || 18000 || 580000 (31.1x) || 3250000 (174.1x) ||
|| 300 || 6500 || 390000 (60.0x) || 740000 (113.6x) || 6400 || 560000 (86.5x) || 3250000 (502.5x) ||
|| 1000 || 2000 || 390000 (191.6x) || 740000 (360.2x) || 1900 || 560000 (283.7x) || 3220000 (1615.5x) ||

*Convert to string (str(x))*
|| *digits* || *Decimal* || *mpf* ||  *raw mpf* || *Decimal+psyco* || *mpf+psyco* || *raw mpf+psyco* ||
|| 15 || 71000 || 39000 (0.6x) || 40000 (0.6x) || 75000 || 60000 (0.8x) || 66000 (0.9x) ||
|| 30 || 47000 || 36000 (0.8x) || 35000 (0.7x) || 52000 || 50000 (1.0x) || 51000 (1.0x) ||
|| 100 || 18000 || 14000 (0.8x) || 14000 (0.8x) || 18000 || 16000 (0.9x) || 16000 (0.9x) ||
|| 300 || 6600 || 3200 (0.5x) || 3400 (0.5x) || 6400 || 3300 (0.5x) || 3500 (0.6x) ||
|| 1000 || 1700 || 350 (0.2x) || 360 (0.2x) || 1900 || 360 (0.2x) || 370 (0.2x) ||

*Convert to float (float(x))*
|| *digits* || *Decimal* || *mpf* ||  *raw mpf* || *Decimal+psyco* || *mpf+psyco* || *raw mpf+psyco* ||
|| 15 || 52000 || 330000 (6.5x) || 590000 (11.4x) || 57000 || 400000 (7.1x) || 1080000 (18.7x) ||
|| 30 || 35000 || 280000 (7.9x) || 460000 (12.9x) || 40000 || 360000 (9.0x) || 950000 (23.7x) ||
|| 100 || 15000 || 280000 (18.6x) || 440000 (28.8x) || 16000 || 340000 (21.7x) || 830000 (51.7x) ||
|| 300 || 5700 || 270000 (48.9x) || 430000 (76.9x) || 5800 || 350000 (60.8x) || 850000 (145.9x) ||
|| 1000 || 1800 || 280000 (156.0x) || 440000 (244.8x) || 1800 || 350000 (192.3x) || 830000 (450.2x) ||

*Equality (x==y)*
|| *digits* || *Decimal* || *mpf* ||  *raw mpf* || *Decimal+psyco* || *mpf+psyco* || *raw mpf+psyco* ||
|| 15 || 37000 || 460000 (12.3x) || 960000 (25.6x) || 70000 || 580000 (8.2x) || 2010000 (28.4x) ||
|| 30 || 29000 || 460000 (15.6x) || 950000 (32.4x) || 51000 || 590000 (11.6x) || 2050000 (40.0x) ||
|| 100 || 14000 || 460000 (32.9x) || 950000 (68.2x) || 20000 || 580000 (28.4x) || 2050000 (99.5x) ||
|| 300 || 4800 || 450000 (93.6x) || 950000 (195.9x) || 6100 || 590000 (96.2x) || 2050000 (333.8x) ||
|| 1000 || 940 || 450000 (484.5x) || 950000 (1014.4x) || 1000 || 590000 (551.9x) || 2020000 (1883.2x) ||

*Comparison (x<y)*
|| *digits* || *Decimal* || *mpf* ||  *raw mpf* || *Decimal+psyco* || *mpf+psyco* || *raw mpf+psyco* ||
|| 15 || 38000 || 280000 (7.3x) || 470000 (12.3x) || 68000 || 480000 (7.0x) || 1640000 (24.0x) ||
|| 30 || 30000 || 280000 (9.2x) || 470000 (15.6x) || 51000 || 470000 (9.2x) || 1670000 (32.7x) ||
|| 100 || 14000 || 280000 (19.2x) || 470000 (32.5x) || 20000 || 470000 (22.6x) || 1660000 (79.5x) ||
|| 300 || 5100 || 280000 (55.4x) || 470000 (93.4x) || 6300 || 470000 (75.8x) || 1670000 (265.5x) ||
|| 1000 || 960 || 280000 (289.6x) || 470000 (490.9x) || 1000 || 470000 (445.2x) || 1670000 (1560.1x) ||

*Addition (x+y)*
|| *digits* || *Decimal* || *mpf* ||  *raw mpf* || *Decimal+psyco* || *mpf+psyco* || *raw mpf+psyco* ||
|| 15 || 10000 || 100000 (9.3x) || 130000 (12.7x) || 20000 || 230000 (11.6x) || 450000 (22.4x) ||
|| 30 || 8100 || 92000 (11.4x) || 120000 (15.0x) || 14000 || 200000 (14.1x) || 370000 (25.4x) ||
|| 100 || 3000 || 93000 (30.4x) || 120000 (40.2x) || 5100 || 200000 (39.3x) || 360000 (71.1x) ||
|| 300 || 1000 || 84000 (84.2x) || 100000 (109.1x) || 1400 || 160000 (114.9x) || 260000 (183.5x) ||
|| 1000 || 180 || 62000 (333.5x) || 76000 (409.9x) || 220 || 98000 (432.4x) || 120000 (561.1x) ||

*Subtraction (x-y)*
|| *digits* || *Decimal* || *mpf* ||  *raw mpf* || *Decimal+psyco* || *mpf+psyco* || *raw mpf+psyco* ||
|| 15 || 10000 || 100000 (9.4x) || 95000 (9.0x) || 20000 || 230000 (11.8x) || 250000 (12.8x) ||
|| 30 || 7900 || 92000 (11.6x) || 92000 (11.5x) || 14000 || 200000 (13.8x) || 250000 (17.0x) ||
|| 100 || 3000 || 93000 (30.7x) || 61000 (20.1x) || 5100 || 200000 (39.3x) || 130000 (25.8x) ||
|| 300 || 1000 || 84000 (84.5x) || 57000 (57.7x) || 1400 || 160000 (115.8x) || 110000 (81.8x) ||
|| 1000 || 180 || 63000 (341.0x) || 47000 (257.0x) || 220 || 98000 (433.3x) || 81000 (360.3x) ||

*Multiplication (x*y)*
|| *digits* || *Decimal* || *mpf* ||  *raw mpf* || *Decimal+psyco* || *mpf+psyco* || *raw mpf+psyco* ||
|| 15 || 8100 || 110000 (14.0x) || 150000 (19.7x) || 15000 || 240000 (15.7x) || 500000 (32.4x) ||
|| 30 || 5100 || 110000 (21.9x) || 150000 (30.8x) || 10000 || 240000 (24.0x) || 480000 (48.0x) ||
|| 100 || 1700 || 84000 (47.0x) || 100000 (59.6x) || 3300 || 140000 (44.4x) || 210000 (64.9x) ||
|| 300 || 530 || 39000 (74.4x) || 44000 (84.1x) || 880 || 49000 (56.1x) || 56000 (63.8x) ||
|| 1000 || 100 || 7800 (74.2x) || 8000 (76.6x) || 130 || 8100 (58.3x) || 8300 (59.7x) ||

*Division (x/y)*
|| *digits* || *Decimal* || *mpf* ||  *raw mpf* || *Decimal+psyco* || *mpf+psyco* || *raw mpf+psyco* ||
|| 15 || 4200 || 87000 (20.8x) || 110000 (27.5x) || 10000 || 180000 (18.1x) || 310000 (31.4x) ||
|| 30 || 2300 || 81000 (34.7x) || 100000 (44.8x) || 5900 || 150000 (26.4x) || 250000 (41.8x) ||
|| 100 || 760 || 58000 (76.1x) || 69000 (90.5x) || 1800 || 88000 (48.2x) || 110000 (60.2x) ||
|| 300 || 220 || 18000 (84.0x) || 19000 (88.5x) || 450 || 21000 (46.2x) || 22000 (48.8x) ||
|| 1000 || 40 || 2400 (60.2x) || 2400 (60.7x) || 59 || 2400 (41.5x) || 2400 (41.8x) ||

*Square root (x^0.5)*
|| *digits* || *Decimal* || *mpf* ||  *raw mpf* || *Decimal+psyco* || *mpf+psyco* || *raw mpf+psyco* ||
|| 15 || 440 || 44000 (101.2x) || 53000 (120.6x) || 880 || 110000 (133.6x) || 130000 (153.9x) ||
|| 30 || 290 || 36000 (126.6x) || 42000 (146.1x) || 580 || 92000 (158.0x) || 100000 (181.1x) ||
|| 100 || 100 || 24000 (231.7x) || 26000 (253.8x) || 200 || 48000 (235.0x) || 52000 (252.5x) ||
|| 300 || 30 || 12000 (414.6x) || 13000 (435.9x) || 53 || 18000 (342.1x) || 18000 (350.8x) ||
|| 1000 || 6 || 2800 (425.0x) || 2800 (433.9x) || 9 || 3100 (340.7x) || 3100 (340.6x) ||

*Integer power (x^42)*
|| *digits* || *Decimal* || *mpf* ||  *raw mpf* || *Decimal+psyco* || *mpf+psyco* || *raw mpf+psyco* ||
|| 15 || 860 || 30000 (35.6x) || 33000 (39.0x) || 1700 || 39000 (22.8x) || 45000 (26.4x) ||
|| 30 || 600 || 15000 (25.5x) || 16000 (26.7x) || 1100 || 17000 (14.9x) || 18000 (15.8x) ||
|| 100 || 230 || 6900 (29.3x) || 7000 (29.8x) || 420 || 12000 (28.4x) || 12000 (29.7x) ||
|| 300 || 74 || 4600 (61.7x) || 4600 (62.3x) || 110 || 6300 (53.1x) || 6500 (54.6x) ||
|| 1000 || 14 || 1400 (96.2x) || 1400 (96.4x) || 19 || 1500 (80.3x) || 1500 (81.2x) ||

*Exponential function (exp(x))*
|| *digits* || *Decimal* || *mpf* ||  *raw mpf* || *Decimal+psyco* || *mpf+psyco* || *raw mpf+psyco* ||
|| 15 || 93 || 32000 (349.5x) || 36000 (386.6x) || 190 || 46000 (232.7x) || 73000 (368.0x) ||
|| 30 || 37 || 26000 (694.6x) || 28000 (749.1x) || 80 || 41000 (522.0x) || 53000 (661.2x) ||
|| 100 || 5 || 9600 (1705.4x) || 9900 (1757.5x) || 11 || 12000 (1087.5x) || 12000 (1155.9x) ||
|| 300 || 0 || 1600 (2267.9x) || 1600 (2269.9x) || 1 || 1700 (1361.2x) || 1700 (1376.5x) ||

*Natural logarithm (log(x))*
|| *digits* || *Decimal* || *mpf* ||  *raw mpf* || *Decimal+psyco* || *mpf+psyco* || *raw mpf+psyco* ||
|| 15 || 80 || 14000 (181.9x) || 16000 (200.4x) || 160 || 24000 (146.2x) || 29000 (174.3x) ||
|| 30 || 18 || 10000 (534.3x) || 10000 (570.3x) || 39 || 17000 (441.3x) || 18000 (479.8x) ||
|| 100 || 1 || 4400 (3065.6x) || 4600 (3162.8x) || 2 || 6400 (2194.8x) || 6600 (2274.1x) ||
|| 300 || 0 || 1000 (8102.6x) || 1000 (8190.2x) || 0 || 1100 (5223.2x) || 1100 (5236.9x) ||

*Sine (sin(x))*
|| *digits* || *Decimal* || *mpf* ||  *raw mpf* || *Decimal+psyco* || *mpf+psyco* || *raw mpf+psyco* ||
|| 15 || 130 || 18000 (134.8x) || 19000 (142.5x) || 280 || 30000 (107.7x) || 36000 (128.9x) ||
|| 30 || 57 || 14000 (253.8x) || 15000 (265.1x) || 110 || 23000 (199.7x) || 27000 (231.2x) ||
|| 100 || 8 || 5700 (639.0x) || 5800 (647.8x) || 17 || 7800 (441.1x) || 8200 (463.3x) ||
|| 300 || 1 || 960 (828.8x) || 960 (830.0x) || 2 || 1000 (511.2x) || 1000 (517.6x) ||

*Tangent (tan(x))*
|| *digits* || *Decimal* || *mpf* ||  *raw mpf* || *Decimal+psyco* || *mpf+psyco* || *raw mpf+psyco* ||
|| 15 || 69 || 16000 (240.1x) || 17000 (251.1x) || 140 || 32000 (226.0x) || 33000 (234.5x) ||
|| 30 || 29 || 12000 (428.6x) || 12000 (442.5x) || 60 || 22000 (379.2x) || 23000 (395.5x) ||
|| 100 || 4 || 5200 (1165.9x) || 5300 (1184.0x) || 8 || 7400 (843.0x) || 7500 (848.3x) ||
|| 300 || 0 || 910 (1563.5x) || 910 (1570.9x) || 1 || 1000 (981.9x) || 1000 (982.3x) ||

*Inverse tangent(atan(x))*
|| *digits* || *Decimal* || *mpf* ||  *raw mpf* || *Decimal+psyco* || *mpf+psyco* || *raw mpf+psyco* ||
|| 15 || 29 || 10000 (345.1x) || 10000 (363.4x) || 60 || 19000 (328.5x) || 19000 (327.6x) ||
|| 30 || 11 || 6200 (566.9x) || 6300 (576.5x) || 22 || 10000 (467.4x) || 10000 (468.1x) ||
|| 100 || 1 || 1300 (1035.2x) || 1300 (1021.8x) || 2 || 1800 (688.5x) || 1800 (689.0x) ||
|| 300 || 0 || 140 (1004.0x) || 140 (1003.8x) || 0 || 150 (626.4x) || 160 (627.5x) ||

*Hyperbolic cosine (cosh(x))*
|| *digits* || *Decimal* || *mpf* ||  *raw mpf* || *Decimal+psyco* || *mpf+psyco* || *raw mpf+psyco* ||
|| 15 || 140 || 16000 (112.3x) || 17000 (118.6x) || 280 || 31000 (109.8x) || 39000 (135.6x) ||
|| 30 || 62 || 14000 (231.0x) || 15000 (242.2x) || 120 || 26000 (210.3x) || 30000 (244.8x) ||
|| 100 || 9 || 7000 (752.5x) || 7100 (769.9x) || 18 || 9700 (533.6x) || 10000 (562.7x) ||
|| 300 || 1 || 1400 (1212.1x) || 1400 (1218.2x) || 2 || 1500 (753.3x) || 1500 (762.5x) ||
