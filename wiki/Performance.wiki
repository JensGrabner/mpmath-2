#summary Performance benchmarks

The mpmath `benchmark.py` script generated the following timings on an Athlon 3700+ for mpmath 3.0. The script measures the number of operations that can be carried out per second at the given precision with x and y being random full-precision numbers between 0 and 32.

{{{
mpf timings (operations / second)

    op / dps :      15      30     100     500    1000
----------------------------------------------------------
      int(x) :  280000  280000  280000  290000  280000
    float(x) :  300000  300000  300000  110000  110000
      str(x) :    1000     730     320      69      27
          +x :  130000  120000  120000  120000  120000
          -x :  140000  120000  120000  110000  100000
      x * 10 :   77000   69000   72000   68000   58000
      x + 10 :   53000   58000   55000   44000   37000
      x / 10 :   59000   50000   49000   42000   38000
       x + y :   71000   65000   64000   60000   45000
       x - y :   67000   60000   60000   52000   37000
       x * y :   71000   68000   59000   19000    7500
       x / y :   60000   56000   46000    8300    2400
      x == y :  600000  590000  590000  600000  580000
       x < y :  260000  260000  260000  260000  260000
      abs(x) :  150000  130000  130000  130000  130000
     sqrt(x) :   35000   32000   25000    7700    2900
      x**0.5 :   18000   17000   15000    6400    2700
      exp(x) :   29000   23000    9700     570     120
      log(x) :   15000   10000    4900     420     100
       x**42 :   11000   10000    9200    3400    1600
        x**y :    7200    5600    2800     230      56
      sin(x) :   17000   13000    6800     380      80
      tan(x) :   15000   12000    5900     360      77
     atan(x) :   12000    8200    2400      80      13
     cosh(x) :   14000   12000    6700     520     110
  asin(x/32) :    1600    1500    1100     180      33
      erf(x) :     670     570     300      20       4
  gamma(x+1) :    2200    1700     470       9       1
     zeta(x) :     260     140      33       0
}}}

*Note*: the slow string conversion has been fixed in the current development version  (see the SVN repository).

[http://psyco.sourceforge.net/ psyco] improves the performance significantly (usually 50-100%)

==Using mpmath.lib==
For improved performance, one can switch to a faster rounding mode than the default and also use the direct functions in `mpmath.lib` instead of creating `mpf` objects. The following table lists performance of these functions with floor rounding and with psyco enabled.

{{{
    op / dps :      15      30     100     500    1000
---------------------------------------------------------
        fcmp : 1180000 1200000 1190000  810000  770000
        fadd :  370000  270000  240000  170000  130000
        fsub :  300000  220000  200000  150000  100000
        fmul :  370000  270000  170000   25000    8300
        fdiv :  280000  180000   95000    8800    2400
       fsqrt :  130000   90000   59000    9600    3100
        fexp :   73000   49000   13000     570     120
}}}

Addition, for example, is over 5x faster than when working with regular `mpf` objects without psyco.

==Comparison to Decimal==

The timings for `Decimal` (for supported operations) are:

{{{
Decimal timings (operations / second)

    op / dps :      15      30     100     500    1000
----------------------------------------------------------
      int(x) :   75000   46000   17000    4100    2100
    float(x) :   50000   35000   14000    3500    1500
      str(x) :   66000   42000   17000    3800    1700
          +x :  110000  100000   75000   29000   16000
          -x :   39000   29000   12000    2800    1500
      x * 10 :   10000    7600    3100     590     230
      x + 10 :    9400    7300    3300     640     260
      x / 10 :    4900    2600     760     110      41
       x + y :    9700    7200    2900     480     180
       x - y :    9700    6900    2800     480     170
       x * y :    8100    5100    1800     280     100
       x / y :    4000    2300     730     110      40
      x == y :  120000  110000   85000   31000   17000
       x < y :  140000  130000   89000   30000   16000
      abs(x) :   97000   90000   69000   28000   16000
    x.sqrt() :     440     290     100      18       6
       x**42 :     860     600     240      39      14
}}}

The Python Package Index contains at least three libraries that implement transcendental functions for the `Decimal` class: [http://pypi.python.org/pypi/dmath/0.9 dmath], [http://pypi.python.org/pypi/AJDecimalMathAdditions/0.1.0 AJDecimalMathAdditions], and  [http://pypi.python.org/pypi/decimalfuncs/1.4 decimalfuncs]. Some timings are presented in the following table.

{{{
                   decimalfuncs            AJDecimalMathAdditions          dmath

    op / dps :      15      30     100       15      30     100       15      30     100
----------------------------------------------------------------------------------------
      exp(x) :      94      38       5   |  100      41       6   |   94      38       5
      log(x) :      13       9       2   |   25       8       0   |   32      21       1
      sin(x) :     130      58       9   |  190      81      12   |  130      58       9
     atan(x) :      10       6       1   |  140      58       1   |   30      11       1

}}}

mpmath is about 100-10000 times faster than each one of them up to 100 digits, and should be much faster still at higher precision.