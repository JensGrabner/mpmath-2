#summary Performance benchmarks

The mpmath `benchmark.py` script generated the following timings on an Athlon 3700+ for mpmath 3.0. The script measures the number of operations that can be carried out per second at the given precision with x and y being random full-precision numbers between 0 and 32.

{{{
mpf timings (operations / second)

    op / dps :      15      30     100     500    1000
----------------------------------------------------------
      int(x) :  280000  280000  280000  290000  280000
    float(x) :  300000  300000  300000  110000  110000
      str(x) :    1000     730     320      69      27
          +x :  130000  120000  120000  120000  120000
          -x :  140000  120000  120000  110000  100000
      x * 10 :   77000   69000   72000   68000   58000
      x + 10 :   53000   58000   55000   44000   37000
      x / 10 :   59000   50000   49000   42000   38000
       x + y :   71000   65000   64000   60000   45000
       x - y :   67000   60000   60000   52000   37000
       x * y :   71000   68000   59000   19000    7500
       x / y :   60000   56000   46000    8300    2400
      x == y :  600000  590000  590000  600000  580000
       x < y :  260000  260000  260000  260000  260000
      abs(x) :  150000  130000  130000  130000  130000
     sqrt(x) :   35000   32000   25000    7700    2900
      x**0.5 :   18000   17000   15000    6400    2700
      exp(x) :   29000   23000    9700     570     120
      log(x) :   15000   10000    4900     420     100
       x**42 :   11000   10000    9200    3400    1600
        x**y :    7200    5600    2800     230      56
      sin(x) :   17000   13000    6800     380      80
      tan(x) :   15000   12000    5900     360      77
     atan(x) :   12000    8200    2400      80      13
     cosh(x) :   14000   12000    6700     520     110
  asin(x/32) :    1600    1500    1100     180      33
      erf(x) :     670     570     300      20       4
  gamma(x+1) :    2200    1700     470       9       1
     zeta(x) :     260     140      33       0
}}}

String conversion is clearly a bottleneck (this is due to the `Decimal` class currently being used for binary-to-decimal conversion). psyco consistently speeds things up by about 50-100%.

The timings for `Decimal` (for supported operations) are:

{{{
Decimal timings (operations / second)

    op / dps :      15      30     100     500    1000
----------------------------------------------------------
      int(x) :   75000   46000   17000    4100    2100
    float(x) :   50000   35000   14000    3500    1500
      str(x) :   66000   42000   17000    3800    1700
          +x :  110000  100000   75000   29000   16000
          -x :   39000   29000   12000    2800    1500
      x * 10 :   10000    7600    3100     590     230
      x + 10 :    9400    7300    3300     640     260
      x / 10 :    4900    2600     760     110      41
       x + y :    9700    7200    2900     480     180
       x - y :    9700    6900    2800     480     170
       x * y :    8100    5100    1800     280     100
       x / y :    4000    2300     730     110      40
      x == y :  120000  110000   85000   31000   17000
       x < y :  140000  130000   89000   30000   16000
      abs(x) :   97000   90000   69000   28000   16000
    x.sqrt() :     440     290     100      18       6
       x**42 :     860     600     240      39      14
}}}